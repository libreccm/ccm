//
// Copyright (C) 2003-2004 Red Hat Inc. All Rights Reserved.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
// $Id: ContentChangeTime.pdl 287 2005-02-22 00:29:02Z sskracic $
// $DateTime: 2004/08/16 18:10:38 $
model com.arsdigita.search.intermedia;

// ContentChangeTime object is used to store when content last changes
// Only needs to do insert.  Is never read by object.

data operation InsertContentChangeTime {
    do {
        insert into content_change_time (
            change_time
        ) values (
            :timeLastChange
        )
    }
}

query getContentChangeTimes {
    Long       timeLastChange;
    Long       timeEarliestChange;

    do {
        select max(change_time) as time_last_change,
               min(change_time) as time_first_change
        from content_change_time
    } map {
        timeLastChange = time_last_change;
        timeEarliestChange = time_first_change;
    }
}

// Following returns the earliest time since the last indexing started, or zero
// Filter is applied:  query.setFilter ("change_time > TimeIndexingStarted")
// to find earliest

query getTimeEarliestNonSyncedChange {
    Long timeEarliestChange;
    do {
        select nvl(min(change_time),0) as time_first_change
        from content_change_time
    } map {
        timeEarliestChange = time_first_change;
    }
}
