//
// Copyright (C) 2001-2004 Red Hat Inc. All Rights Reserved.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
// $Id: Component.pdl 287 2005-02-22 00:29:02Z sskracic $
// $DateTime: 2004/08/16 18:10:38 $
model com.arsdigita.formbuilder;


// The pdl parser will not let me import just ACSObject
import com.arsdigita.kernel.*;

object type Component extends ACSObject {
    String[0..1] adminName = bebop_components.admin_name VARCHAR(100);
    String[0..1] description = bebop_components.description VARCHAR(4000);
    String[0..1] attributeString = bebop_components.attribute_string VARCHAR(4000);
    Boolean[0..1] isActive = bebop_components.active_p CHAR(1);

    reference key (bebop_components.component_id);
}

//
// Disabled pending reworking of the whole PersistentContainerHelper
// class and removal of the old UI.
association {
    composite Component[0..1] componentContainer = join bebop_components.component_id
                                  to bebop_component_hierarchy.component_id,
                                join bebop_component_hierarchy.container_id
                                  to bebop_components.component_id;
    component Component[0..n] \component = join bebop_components.component_id
                                   to bebop_component_hierarchy.container_id,
                                 join bebop_component_hierarchy.component_id
                                   to bebop_components.component_id;
    BigDecimal[1..1] orderNumber = bebop_component_hierarchy.order_number INTEGER;
    Boolean[1..1] isSelected = bebop_component_hierarchy.selected_p CHAR(1);
}
