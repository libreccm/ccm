/*
 * Copyright (C) 2015 LibreCCM Foundation.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package org.libreccm.export.convert.web;


import org.libreccm.export.convert.AbstractDomainObjectsConverter;

import org.libreccm.export.cmd.ExportLogger;

import org.libreccm.export.convert.CcmCoreEntities;

import org.libreccm.core.Resource;

import org.libreccm.core.ResourceType;

import org.libreccm.web.CcmApplication;

import com.arsdigita.web.Application;

import java.util.ArrayList;
import java.util.List;

/**
 * Class for converting all trunk-{@link Application}s into
 * ng-{@link CcmApplication}s as preparation for a successful export of all
 * trunkclasses into the new ng-system.
 *
 * @author <a href="mailto:tosmers@uni-bremen.de">Tobias Osmers</a>
 * @version created the 8/2/17
 */
public class CcmApplicationsConverter extends AbstractDomainObjectsConverter {
    
    private static CcmApplicationsConverter instance;

    static {
        instance = new CcmApplicationsConverter();
    }

    @Override
    public String convertsType() {
        return Application.class.getName();
    }
    
    /**
     * Retrieves all trunk-{@link com.arsdigita.kernel.ResourceType}s from
     * the persistent storage and collects them in a list. Then calls for
     * creating the equivalent ng-{@link ResourceType}s focusing on keeping all
     * the associations in tact.
     */
    @Override
    public void convertAll() {
        ExportLogger.fetching("applications");
        List<Application> trunkApplications = Application
                .getAllApplicationObjects();

        ExportLogger.converting("ccm applications");
        createCcmApplicationsAndSetAssociations(trunkApplications);
        setRingAssociations(trunkApplications);

        ExportLogger.sorting("ccm applications");
        sortCcmApplications();

        ExportLogger.newLine();
    }

    /**
     * Creates the equivalent ng-class of the {@code Application} and restores
     * the associations to other classes.
     *
     * @param trunkApplications List of all {@link Application}s
     *                          from this old trunk-system.
     */
    private void createCcmApplicationsAndSetAssociations(
            List<Application> trunkApplications) {
        int processed = 0;

        for (Application trunkApplication : trunkApplications) {
            // create applications
            CcmApplication ccmApplication = new CcmApplication
                    (trunkApplication);

            // set resource type
            com.arsdigita.kernel.ResourceType trunkResourceType = trunkApplication
                    .getResourceType();
            if (trunkResourceType != null) {
                ResourceType resourceType = CcmCoreEntities
                        .RESOURCE_TYPES
                        .get(trunkResourceType.getID().longValue());
                ccmApplication.setResourceType(resourceType);
            }

            processed++;
        }
        ExportLogger.created("ccm applications", processed);
    }

    /**
     * Method for setting the parent {@link Resource} on the one side and the
     * sub-{@link Resource}s on the other side. Attribute of class
     * {@link Resource}.
     *
     * @param trunkApplications List of all {@link Application} from the old
     *                          trunk-system.
     */
    private void setRingAssociations(List<Application> trunkApplications) {
        for (Application trunkApplication : trunkApplications) {
            CcmApplication ccmApplication = CcmCoreEntities
                    .CCM_APPLICATIONS
                    .get(trunkApplication.getID().longValue());

            // set parent Resource and opposed association
            CcmApplication parentResource;

            Application trunkParent = trunkApplication
                    .getParentApplication();
            if (trunkParent != null) {
                parentResource = CcmCoreEntities
                        .CCM_APPLICATIONS
                        .get(trunkParent.getID().longValue());

                ccmApplication.setParent(parentResource);
                parentResource.addChild(ccmApplication);
            }
        }
    }

    /**
     * Sorts values of resource-map to ensure that the parent-resources will
     * be listed before their childs in the export file.
     *
     * Runs once over the unsorted list and iterates over each their parents
     * to add them to the sorted list.
     */
    private void sortCcmApplications() {
        ArrayList<CcmApplication> sortedList = new ArrayList<>();

        int runs = 0;
        for (CcmApplication application :
                CcmCoreEntities.CCM_APPLICATIONS.values()) {
            addResourceParent(sortedList, application);

            if (!sortedList.contains(application))
                sortedList.add(application);

            runs++;
        }
        CcmCoreEntities.SORTED_CCM_APPLICATIONS = sortedList;

        ExportLogger.ranSort("ccm applications", runs);
    }

    /**
     * Helper method to recursively add all parent resources before their
     * childs.
     *
     * @param sortedList List of already sorted assignable tasks
     * @param ccmApplication Current assignable task
     */
    private void addResourceParent(ArrayList<CcmApplication> sortedList,
                                          CcmApplication ccmApplication) {
        CcmApplication resourceParent = (CcmApplication) ccmApplication
                .getParent();

        if (resourceParent != null) {
            addResourceParent(sortedList, resourceParent);

            if (!sortedList.contains(resourceParent))
                sortedList.add(resourceParent);
        }
    }

    /**
     * Getter for the instance of the singleton.
     *
     * @return instance of this singleton
     */
    public static CcmApplicationsConverter getInstance() {
        return instance;
    }
}
