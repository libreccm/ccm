/*
 * Copyright (C) 2015 LibreCCM Foundation.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package org.libreccm.core;

import org.libreccm.export.convert.Portable;

import org.libreccm.export.convert.CcmCoreEntities;

import org.libreccm.l10n.LocalizedString;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import java.util.Locale;

/**
 * This class is a port of the old {@code ResourceType} entity.
 *
 * /@deprecated The real purpose of this class is not clear. Also the
 * informations provided by the entities of this class are all quite static or
 * can be interfered from the classes itself. In modern Java most if not all the
 * informations provided by the entities of this class would be expressed as
 * annotations. At the moment it is not clear of we can remove this class
 * completely therefore it is still here but will maybe removed very soon.
 *
 * @author <a href="mailto:tosmers@uni-bremen.de>Tobias Osmers<\a>
 * @version created the 7/27/17
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class,
                  resolver = ResourceTypeIdResolver.class,
                  property = "title")
public class ResourceType implements Portable {

    private long resourceTypeId;
    private String title;
    private LocalizedString description;
    private boolean workspaceApplication;
    private boolean viewableAsFullPage;
    private boolean viewableAsEmbedded;
    private boolean singleton;

    public ResourceType(com.arsdigita.kernel.ResourceType trunkObject) {
        this.resourceTypeId = trunkObject.getID().longValue();

        this.title = trunkObject.getTitle();
        this.description = new LocalizedString();
        this.description
                 .addValue(Locale.getDefault(), trunkObject.getDescription());

        this.workspaceApplication = false;
        this.viewableAsFullPage = false;
        this.viewableAsEmbedded = false;
        this.singleton = false;

        CcmCoreEntities.RESOURCE_TYPES.put(this.resourceTypeId, this);
    }

    public long getResourceTypeId() {
        return resourceTypeId;
    }

    public void setResourceTypeId(final long resourceTypeId) {
        this.resourceTypeId = resourceTypeId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(final String title) {
        this.title = title;
    }

    public LocalizedString getDescription() {
        return description;
    }

    public void setDescription(final LocalizedString description) {
        this.description = description;
    }

    public boolean isWorkspaceApplication() {
        return workspaceApplication;
    }

    public void setWorkspaceApplication(final boolean workspaceApplication) {
        this.workspaceApplication = workspaceApplication;
    }

    public boolean isViewableAsFullPage() {
        return viewableAsFullPage;
    }

    public void setViewableAsFullPage(final boolean viewableAsFullPage) {
        this.viewableAsFullPage = viewableAsFullPage;
    }

    public boolean isViewableAsEmbedded() {
        return viewableAsEmbedded;
    }

    public void setViewableAsEmbedded(final boolean viewableAsEmbedded) {
        this.viewableAsEmbedded = viewableAsEmbedded;
    }

    public boolean isSingleton() {
        return singleton;
    }

    public void setSingleton(final boolean singleton) {
        this.singleton = singleton;
    }
}
