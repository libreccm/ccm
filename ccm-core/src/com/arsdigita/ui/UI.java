/*
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

package com.arsdigita.ui;

import com.arsdigita.ui.login.Login;
import com.arsdigita.ui.login.LoginServlet;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;

/**
 * <p>A central location for commonly used UI services and their accessories.</p>
 *
 *
 * @author pb
 */
public abstract class UI {

    /** Private loggin instance.  */
    private static final Logger s_log = Logger.getLogger(UI.class);

    /** The UI XML namespace. */
    public static final String UI_XML_NS = "http://www.arsdigita.com/ui/1.0";

    private static final UIConfig s_config = UIConfig.getConfig();

    /** (Relative) URL for systems public top level page.                     */
    // In old LegacyInitializer ROOT_PAGE_KEY =pagemap.root= register/ | portal/
    private static final String s_rootPageURL = s_config.getRootPage();
    /**     */
     private static final String s_userRedirectURL = s_config.getUserRedirect();
    /** (Relative) URL for workspace page.                                    */
    private static final String s_workspaceURL = s_config.getWorkspace();


    /** Root URL                                                              */
    // This address used to be determinded by
    //      SiteNode.getRootSiteNode().getURL();
    // It provides a sitenode without a name an without any parent, i.e. "/"
    // There is no information whether the context path (in case we are not
    // installed as root application (context) of the servlet(!) container).
    // It does obviously NOT include the constant prefix, generated by the
    // new dispatcher.
    //
    // Previously an variant had been used:
    //      SiteNode.getRootSiteNode().getURL(request);
    // but according to a developers comment the latter is not save:
    //  "this isn't safe since you aren't neccessarily calling it from
    //   the root webapp - so we can't blindly prepend the context path
    //   from the current request."
    //
    // Sitenode is deprecated, web.Application should be used instead. But here
    // there is no application to invoke, but we need the root part of the URL
    // for a page to be prepended to its address. This depends on the
    // installation, not on the request or the specific application.
    //
    // XXX must be generated from an installation config record.
    private static final String s_rootURL = "/";

    /**
     * Provides a handle to the UI config record.
     * 
     * @return Instance of UIConfig
     */
    public static UIConfig getConfig() {
        return s_config;
    }

    /**
     * Provides an absolute URL (leading slash) into the system top-level page.
     * It is relative to document root without any constant prefix if there is
     * one configured.
     *
     * XXX This implementation starts with a leading slash and ends with a slash.
     * In previous configurations String urls began without a slash in order
     * to be able to provide a full URL which also contains the context part.
     * Since version 5.2 the context part is handled by (new) dispatcher.
     * Therefore the request parameter is not ignored! This variant is retained
     * for backwards compatibility only. 
     * The leading slash is API change! It's impacts have to be checked. (2011-02)
     *
     * @return URL for top-level page as String
     */
    // In old LegacyInitializer ROOT_PAGE_KEY = pagemap.root = register/
    // (usually modif. to portal/nav)
    public static String getRootPageURL(HttpServletRequest req) {
        if (s_log.isDebugEnabled()) {
            s_log.debug("Root is " + s_rootURL + ", url is " + s_rootPageURL);
        }

        if ((s_rootURL == null) || (s_rootPageURL == null)) {
            return null;
        }
        return s_rootURL + s_rootPageURL;
    }

    /**
     * Provides an absolute URL (leading slash) into the system top-level page.
     * It is relative to document root without any constant prefix if there is
     * one configured.
     *
     * XXX This implementation starts with a leading slash and ends with a slash.
     * In previous configurations String urls began without a slash in order
     * to be able to provide a full URL which also contains the context part.
     * Since version 5.2 the context part is handled by (new) dispatcher.
     * The leading slash it API change! It's impacts have tp be checked. (2011-02)
     *
     * @return URL for top-level page as String
     */
    // In old LegacyInitializer ROOT_PAGE_KEY = register/ (modif. to portal/nav)
    public static String getRootPageURL() {
        if (s_log.isDebugEnabled()) {
            s_log.debug("Root is " + s_rootURL + ", url is " + s_rootPageURL);
        }

        if ((s_rootURL == null) || (s_rootPageURL == null)) {
            return null;
        }
        return s_rootURL + s_rootPageURL;
        //  return s_rootPageURL;
    }

    /**
     * Provides an absolute URL (leading slash) into the system login page.
     * It is relative to document root without any constant prefix if there is
     * one configured.
     *
     * @return URL for login page as String
     * @deprecated use Login.getLoginPageURL()() instead
     */
    public static String getLoginPageURL() {
        return Login.getLoginPageURL();
    }

    /**
     * Provides an absolute URL (leading slash) for a cookie explanation page.
     * It is relative to document root without any constant prefix if there is
     * one configured.
     *
     * @return url String for new user registration page as String
     * @deprecated use LoginServlet.getCookiesExplainPageURL() instead
     */
    public static String getCookiesExplainPageURL() {
        return LoginServlet.getCookiesExplainPageURL();
    }

    /**
     * Provides an absolute URL (leading slash) for a password recovery page.
     * It is relative to document root without any constant prefix if there is
     * one configured.
     *
     * @return url String for new user registration page as String
     * @deprecated use LoginServlet.getRecoverPasswordPageURL() instead
     */
    public static String getRecoverPasswordPageURL() {
        return LoginServlet.getRecoverPasswordPageURL();
    }

    /**
     * Provides an absolute URL (leading slash) to a user profile editig page.
     * It is relative to document root without any constant prefix if there is
     * one configured.
     *
     * @return url String for new user registration page as String
     * @deprecated use LoginServlet.getEditUserProfilePageURL() instead
     */
    public static String getEditUserProfilePageURL() {
        return LoginServlet.getEditUserProfilePageURL();
    }

    /**
     * Provides an absolute URL (leading slash) for the system logout page. It
     * is relative to document root without any constant prefix if there is one
     * configured.
     *
     * @return URL for logout page as String
     * @deprecated use LoginServlet.getLogoutPageURL() instead
     */
    public static String getLogoutPageURL() {
        return LoginServlet.getLogoutPageURL();
    }

    /**
     * Provides the absolute URL of a page, which redirects an incomming request
     * based on some clients property, usually whether the user is logged in,
     * either to a general public page or to a user (client) specific page.
     *
     * It is relative to document root including leading slash but without any
     * constant prefix if there is one configured.
     *
     * It is used by the ccm index page (home/start page) ~/index.jsp. By default
     * it is configured as "pvt/" which redirects to a user specific home page
     * if the initial incomming request comes from a logged in user.
     * Applications may configure a different page according to their specific
     * purposes. e.g ccm-cms provides a page content/content-center-redirect.jsp
     * which redirects a user to the content-center if logged in.
     *
     * XXX This implementation starts with a leading slash and ends with a slash.
     * In previous configurations String urls began without a slash in order
     * to be able to provide a full URL which also contains the context part.
     * Since version 5.2 the context part is handled by (new) dispatcher.
     * Previous implementation of this method signature (no parameter) returned
     * an url without leading slash.
     * The leading slash it API change! It's impacts have tp be checked. (2011-02)
     *
     * @return full URL of a user redirect page, may be null
     */
    // In old LegacyInitializer
    // LOGIN_REDIRECT_PAGE_KEY =page.kernel.login.redirect=pvt/ 
    // (usually modified to "content/content-center-redirect-page.jsp")
    public static String getUserRedirectURL() {
        if (s_log.isDebugEnabled()) {
            s_log.debug("Root is " + s_rootURL + ", url is " + s_userRedirectURL);
        }

        if ((s_rootURL == null) || (s_userRedirectURL == null)) {
            return null;
        }
        return s_rootURL + s_userRedirectURL;
    }

    /**
     * Provides the absolute URL of a page, which redirects an incomming request
     * based on some clients property, usually whether the user is logged in,
     * either to a general public page or to a user (client) specific page.
     *
     * It is relative to document root including leading slash but without any
     * constant prefix if there is one configured.
     *
     * It is used by the ccm index page (home/start page) ~/index.jsp. By default
     * it is configured as "pvt/" which redirects to a user specific home page
     * if the initial incomming request comes from a logged in user.
     * Applications may configure a different page according to their specific
     * purposes. e.g ccm-cms provides a page content/content-center-redirect.jsp
     * which redirects a user to the content-center if logged in.
     *
     * XXX This implementation starts with a leading slash and ends with a slash.
     * In previous configurations String urls began without a slash in order
     * to be able to provide a full URL which also contains the context part.
     * Since version 5.2 the context part is handled by (new) dispatcher.
     * Previous implementation of this method signature (HTTPServletRequest)
     * returned an url to a registration redirect page either starting with a
     * slash for root context or the context path part. HTTPServletRequest is
     * no longer significant here and method signature retained here for
     * backwards compatibility only.
     *
     * @param req HttpServletRequest, may be used to determin the context of
     *            the current thread (application), currently not used and
     *            introduced here for backwards compatibility
     * @return full URL of a user redirect page, may be null
     */
    // see comment at top about getRootURL(req) for details!
    // In old LegacyInitializer
    // LOGIN_REDIRECT_PAGE_KEY =page.kernel.login.redirect=pvt/ 
    // (usually modified to "content/content-center-redirect-page.jsp")
    public static String getUserRedirectURL(HttpServletRequest req) {
        if (s_log.isDebugEnabled()) {
            s_log.debug("Root is " + s_rootURL + ", url is " + s_userRedirectURL);
        }

        if ((s_rootURL == null) || (s_userRedirectURL == null)) {
            return null;
        }
        return s_rootURL + s_userRedirectURL;
    }

    /**
     * Provides the absolute URL for the system workspace page. It is relative
     * to document root including leading slash but without any constant prefix
     * if there is one configured.
     *
     * It is used by the user redirection page (see above) as redirection target
     * if no logged in user exists or no user specific page is configured. By
     * default it is configured as "pvt/" as well. An installation usually
     * defines a different page according to their specific purposes, e.g.
     * portal or navigation.
     *
     * XXX This implementation starts with a leading slash and ends with a slash.
     * In previous configurations String urls began without a slash in order
     * to be able to provide a full URL which also contains the context part.
     * Since version 5.2 the context part is handled by (new) dispatcher.
     * Previous implementation of this method signature (no parameter) returned
     * an url without leading slash.
     * The leading slash it API change! It's impacts have tp be checked. (2011-02)
     *
     * @return URL for workspace page as String
     */
    // In old LegacyInitializer
    // WORKSPACE_PAGE_KEY = page.kernel.workspace=pvt/ (mod- t0 portal/nav)
    public static String getWorkspaceURL() {
        if (s_log.isDebugEnabled()) {
            s_log.debug("Root is " + s_rootURL + ", url is " + s_workspaceURL);
        }

        if ((s_rootURL == null) || (s_workspaceURL == null)) {
            return null;
        }
        return s_rootURL + s_workspaceURL;
    }

    /**
     * Provides the absolute URL for the system workspace page.
     * It is relative to document root including leading slash but without any
     * constant prefix if there is one configured.
     *
     * It is used by the user redirection page (see above) as redirection target
     * if no logged in user exists or no user specific page is configured. By
     * default it is configured as "pvt/" as well. An installation usually
     * defines a different page according to their specific purposes, e.g.
     * portal or navigation.
     *
     * XXX This implementation starts with a leading slash and ends with a slash.
     * In previous configurations String urls began without a slash in order
     * to be able to provide a full URL which also contains the context part.
     * Since version 5.2 the context part is handled by (new) dispatcher.
     * Previous implementation of this method signature (HTTPServletRequest)
     * returned an url to a workspace page either starting with a
     * slash for root context or the context path part. HTTPServletRequest is
     * no longer significant here and method signature retained here for
     * backwards compatibility only.
     *
     *
     * @param req HttpServletRequest, may be used to determin the context of
     *            the current thread (application), currently not used and
     *            introduced here for backwards compatibility
     * @return URL for workspace page as String
     */
    // In old LegacyInitializer
    // WORKSPACE_PAGE_KEY = page.kernel.workspace=pvt/ (mod- t0 portal/nav)
    public static String getWorkspaceURL(HttpServletRequest req) {
        if (s_log.isDebugEnabled()) {
            s_log.debug("Root is " + s_rootURL + ", url is " + s_workspaceURL);
        }

        if ((s_rootURL == null) || (s_workspaceURL == null)) {
            return null;
        }
        return s_rootURL + s_workspaceURL;
    }

    // In old LegacyInitializer
    // PERMISSION_PAGE_KEY = page.kernel.permission = permissions/

    // In old LegacyInitializer
    // PERM_SINGLE_PAGE_KEY = page.kernel.perm-single = permissions/one/

}
