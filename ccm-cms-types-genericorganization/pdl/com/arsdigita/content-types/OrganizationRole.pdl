//
// Copyright (C) 2009 Center of Socialpolitics, University of Bremen
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

model com.arsdigita.cms.contenttypes;

import com.arsdigita.cms.ContentItem;
import com.arsdigita.kernel.ACSObject;

object type OrganizationRole extends ACSObject {
       String[1..1] roleName = ct_organizationroles.rolename VARCHAR(150);
       Person[0..1] targetItem = join ct_organizationroles.target_item_id to ct_persons.person_id;       

       Integer[0..1] roleOrder = ct_organizationroles.role_order INTEGER;

       reference key(ct_organizationroles.role_id);
       aggressive load (roleOwner.id);
}

association {
  composite GenericOrganization[0..1] roleOwner = join ct_organizationroles.owner_id to ct_genericorganizations.organization_id;
  composite OrganizationRole[0..n] roles = join ct_genericorganizations.organization_id to ct_organizationroles.owner_id;    
}

query getRefferingRoles {
      BigDecimal id;

      do {
      	 select r.role_id from organizationroles r where r.target_item_id = :itemID
      } map {
      	id = r.role_id;
      }
}

data operation swapOrganizationRoleWithNextInGroup {
     do {
     	update organizationroles 
	set role_order = CASE WHEN (role_order = :roleOrder) THEN
	       	              (:nextRoleOrder)
			 ELSE
			      (:roleOrder)
			 END
        where (role_order = :roleOrder or role_order = :nextRoleOrder)
        and (select owner_id from ct_organizationroles where organizationrole_id=role_id) = :roleID
	and 2 = (select count(*) from ct_organizationroles r where r.role_id=r.organizationrole_id
	                                                     and (role_order = :roleOrder or role_order = :nextRoleOrder)
                                                             and owner_id = :ownerID)
     }
}

query allRoleOrderForOrganization {
      Integer roleOrder;

      do {
      	 select r.role_order from ct_organizationroles r where r.owner_id = :ownerID
      }
      map {
      	  roleOrder = r.role_order;
      }     
}
