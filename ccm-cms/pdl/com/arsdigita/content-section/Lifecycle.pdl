//
// Copyright (C) 2001-2004 Red Hat Inc. All Rights Reserved.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
// $Id: Lifecycle.pdl 287 2005-02-22 00:29:02Z sskracic $
// $DateTime: 2004/08/17 23:15:09 $
model com.arsdigita.cms;

import com.arsdigita.kernel.*;

//  A lifecycle contain phases.  When a phase is added or removed, 
//  the Java API, will update the start date and end date of the lifecycle.

object type Lifecycle extends ACSObject {
    Date[0..1]    startDateTime = lifecycles.start_date_time TIMESTAMP;
    Date[0..1]    endDateTime = lifecycles.end_date_time TIMESTAMP;

    // The Java listener class to run when of the cycle begins or ends.
    String[0..1]  listener = lifecycles.listener VARCHAR(200);
    // The lifecycle has begun and its begin event has been performed.
    Boolean[0..1] hasBegun = lifecycles.has_begun CHAR(1);
    // The lifecycle has ended and its end event has been performed.
    Boolean[0..1] hasEnded = lifecycles.has_ended CHAR(1);

    composite LifecycleDefinition[1..1] definition = join lifecycles.definition_id 
                                                       to lifecycle_definitions.definition_id;
    component Phase[0..n]  phases = join lifecycles.cycle_id 
                                      to phases.cycle_id;

    reference key (lifecycles.cycle_id);
}
