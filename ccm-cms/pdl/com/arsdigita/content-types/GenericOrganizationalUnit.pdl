//
// Copyright (C) 2010 Jens Pelzetter, for the Center of Social Politics (ZeS) of
// the University of Bremen
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//

model com.arsdigita.cms.contenttypes;

import com.arsdigita.cms.*;
import com.arsdigita.domain.*;
import com.arsdigita.kernel.ACSObject;

// PDL definition for a commons base type for organizations, departments, projects etc.
object type GenericOrganizationalUnit extends ContentPage {
    String[0..1] addendum = cms_organizationalunits.addendum VARCHAR(512);

    reference key (cms_organizationalunits.organizationalunit_id);
}

// Link for contact points.
association {

    GenericOrganizationalUnit[0..n] organizationalunit = join cms_contacts.contact_id
                                                           to cms_organizationalunits_contact_map.contact_id,
                                                         join cms_organizationalunits_contact_map.organizationalunit_id
                                                           to cms_organizationalunits.organizationalunit_id;

    GenericContact[0..n] contacts = join cms_organizationalunits.organizationalunit_id
                                      to cms_organizationalunits_contact_map.organizationalunit_id,
                                    join cms_organizationalunits_contact_map.contact_id
                                      to cms_contacts.contact_id;

   // Some link attributes.
   String[0..1] contact_type = cms_organizationalunits_contact_map.contact_type VARCHAR(100);
   Integer[0..1] contact_order = cms_organizationalunits_contact_map.map_order INTEGER;

}

// Links a organization with persons.
association {

    GenericOrganizationalUnit[0..n] organizationalunit = join cms_persons.person_id
                                                           to cms_organizationalunits_person_map.person_id,
                                                        join cms_organizationalunits_person_map.organizationalunit_id
                                                           to cms_organizationalunits.organizationalunit_id;

    GenericPerson[0..n] persons = join cms_organizationalunits.organizationalunit_id
                                    to cms_organizationalunits_person_map.organizationalunit_id,
                                  join cms_organizationalunits_person_map.person_id
                                    to cms_persons.person_id;

   // Additional attributes for the association
   String[0..1] role_name = cms_organizationalunits_person_map.role_name VARCHAR(100);
   String[0..1] status = cms_organizationalunits_person_map.status VARCHAR(100);

}

//Used build hierarchies of organizational units
association {
    
    GenericOrganizationalUnit[0..n] superiorOrgaunits = join cms_organizationalunits.organizationalunit_id
                                                           to cms_organizationalunits_hierarchy_map.subordinate_orgaunit_id,
                                                         join cms_organizationalunits_hierarchy_map.superior_orgaunit_id
                                                           to cms_organizationalunits.organizationalunit_id;

    GenericOrganizationalUnit[0..n] subordinateOrgaunits = join cms_organizationalunits.organizationalunit_id
                                                              to cms_organizationalunits_hierarchy_map.superior_orgaunit_id,
                                                            join cms_organizationalunits_hierarchy_map.subordinate_orgaunit_id
                                                              to cms_organizationalunits.organizationalunit_id;

    //Additonal attributes for the assoication
    //Optional string for *internal* data
    String[0..1] assocType = cms_organizationalunits_hierarchy_map.assoc_type VARCHAR(128);
    //Integers for sorting
    Integer[0..1] superiorOrgaUnitOrder = cms_organizationalunits_hierarchy_map.superior_orgaunit_order INTEGER;
    Integer[0..1] subordinateOrgaUnitOrder = cms_organizationalunits_hierarchy_map.subordinate_orgaunit_order INTEGER;
}

//Returns the ids of all organizational units which are a subordinate orga unit
//of this orga unit of a subordinate orga unit
//@param orgaunitId The id of the organizational unit to start with
query getIdsOfSubordinateOrgaUnitsRecursivly{
    BigDecimal orgaunitId;
    String orgaunitName;
    
    do {
        with recursive subordinate_orgaunits(orgaunit_id, orgaunit_name) AS (
            select cms_organizationalunits.organizationalunit_id as orgaunit_id,
                   cms_items.name as orgaunit_name
            from cms_organizationalunits 
            join cms_items on cms_organizationalunits.organizationalunit_id = cms_items.item_id
            where cms_organizationalunits.organizationalunit_id = :orgaunitId
            union all 
            select ou.organizationalunit_id as orgaunit_id,
                   cms_items.name as orgaunit_name
            from subordinate_orgaunits sou,
                 cms_organizationalunits ou
            join cms_items on ou.organizationalunit_id = cms_items.item_id
            join cms_organizationalunits_hierarchy_map on ou.organizationalunit_id = cms_organizationalunits_hierarchy_map.subordinate_orgaunit_id
            where cms_organizationalunits_hierarchy_map.superior_orgaunit_id = sou.orgaunit_id
        )
        select orgaunit_id, orgaunit_name from subordinate_orgaunits
    } map {
        orgaunitId = subordinate_orgaunits.orgaunit_id;
        orgaunitName = subordinate_orgaunits.orgaunit_name;
    }
}

//Same as above but with an addional parameter
//@param orgaunitId The id of the organizational unit to start with
//@param assocType Include only subordinate orga units with the specified assoc
//type
query getIdsOfSubordinateOrgaUnitsRecursivlyWithAssocType{
    BigDecimal orgaunitId;
    String orgaunitName;
    
    do {
        with recursive subordinate_orgaunits(orgaunit_id, orgaunit_name) AS (
            select cms_organizationalunits.organizationalunit_id as orgaunit_id,
                   cms_items.name as orgaunit_name
            from cms_organizationalunits 
            join cms_items on cms_organizationalunits.organizationalunit_id = cms_items.item_id
            where cms_organizationalunits.organizationalunit_id = :orgaunitId
            union all 
            select ou.organizationalunit_id as orgaunit_id,
                   cms_items.name as orgaunit_name
            from subordinate_orgaunits sou,
                 cms_organizationalunits ou
            join cms_items on ou.organizationalunit_id = cms_items.item_id
            join cms_organizationalunits_hierarchy_map on ou.organizationalunit_id = cms_organizationalunits_hierarchy_map.subordinate_orgaunit_id
            where cms_organizationalunits_hierarchy_map.superior_orgaunit_id = sou.orgaunit_id and cms_organizationalunits_hierarchy_map.assoc_type = :assocType
        )
        select orgaunit_id, orgaunit_name from subordinate_orgaunits
    } map {
        orgaunitId = subordinate_orgaunits.orgaunit_id;
        orgaunitName = subordinate_orgaunits.orgaunit_name;
    }
}

//Gets the members of several orga units
//@param orgaUnitsIds comma separated list of the ids of orga units to include
query getIdsOfMembersOfOrgaUnits {
    BigDecimal memberId;
    BigDecimal orgaunitId;
    String surname;
    String givenname;
    String roleName;
    String status;

    do {
        select distinct on (cms_persons.person_id) cms_persons.person_id, cms_persons.surname, cms_persons.givenname, cms_organizationalunits_person_map.organizationalunit_id, cms_organizationalunits_person_map.role_name, cms_organizationalunits_person_map.status
        from cms_persons 
        join cms_organizationalunits_person_map on cms_persons.person_id = cms_organizationalunits_person_map.person_id       
    } map {
        memberId = cms_persons.person_id;
        orgaunitId = cms_organizationalunits_person_map.organizationalunit_id;
        surname = cms_persons.surname;
        givenname = cms_persons.givenname;
        roleName = cms_organizationalunits_person_map.role_name;
        status = cms_organizationalunits_person_map.status;        
    }
}