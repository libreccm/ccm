package com.arsdigita.cms.contenttypes.ui;

import com.arsdigita.bebop.PageState;
import com.arsdigita.persistence.DataQuery;
import com.arsdigita.web.ParameterMap;
import com.arsdigita.web.URL;
import com.arsdigita.web.Web;
import com.arsdigita.xml.Element;
import java.util.Iterator;

/**
 * Helper class for generating a paginator in lists generated by 
 * {@link GenericOrgaUnitTab}s.
 * 
 * @param <T> 
 * @author Jens Pelzetter 
 * @version $Id$
 */
public class GenericOrgaUnitPaginator<T extends DataQuery> {

    private final static String PAGE_NUMBER = "pageNumber";
    private final long pageSize;
    private final long pageCount;
    private final long begin;
    private final long count;
    private final long end;
    private final long pageNumber;

    public GenericOrgaUnitPaginator(final T collection,
                                    final PageState state,
                                    final long pageSize) {
        this.pageSize = pageSize;

        final long pageNum = getPageNumber(state);

        pageCount = getPageCount(collection.size());
        begin = getPaginatorBegin(pageNum);
        count = getPaginatorCount(begin, collection.size());
        end = getPaginatorEnd(begin, count);
        pageNumber = normalizePageNumber(pageCount, pageNum);
    }

    public void setRange(final T collection) {
        collection.setRange((int) begin + 1, (int) end + 1);
    }

    public void generateXml(final Element parent) {
        final Element paginatorElem = parent.newChildElement(
                "nav:paginator",
                "http://ccm.redhat.com/navigation");

        final URL requestUrl = Web.getWebContext().getRequestURL();
        final ParameterMap parameters = new ParameterMap();
        if (requestUrl.getParameterMap() != null) {

            Iterator<?> current =
                        requestUrl.getParameterMap().keySet().iterator();
            while (current.hasNext()) {
                final String key = (String) current.next();
                if (PAGE_NUMBER.equals(key)) {
                    continue;
                } else {
                    parameters.setParameter(key, requestUrl.getParameterValues(
                            key));
                }
            }
        }

        paginatorElem.addAttribute("pageParam", "pageNumber");
        paginatorElem.addAttribute("baseURL", URL.there(requestUrl.getPathInfo(),
                                                        parameters).toString());
        paginatorElem.addAttribute("pageNumber", Long.toString(pageNumber));
        paginatorElem.addAttribute("pageCount", Long.toString(pageCount));
        paginatorElem.addAttribute("pageSize", Long.toString(pageSize));
        paginatorElem.addAttribute("objectBegin", Long.toString(begin + 1));
        paginatorElem.addAttribute("objectEnd", Long.toString(end + 1));
        paginatorElem.addAttribute("objectCount", Long.toString(count));
        
    }

    private long getPageNumber(final PageState state) {
        long num = 1;

        if (state == null) {
            return num;
        }


        final String value = state.getRequest().getParameter(PAGE_NUMBER);
        if (value != null) {
            try {
                num = Integer.parseInt(value);
            } catch (NumberFormatException ex) {
                num = 1;
            }
        }

        return num;
    }

    private long normalizePageNumber(final long pageCount,
                                     final long pageNumber) {
        long num = pageNumber;
        if (num < 1) {
            num = 1;
        }
        if (num > pageCount) {
            if (pageCount == 0) {
                num = 1;
            } else {
                num = pageCount;
            }
        }

        return num;
    }

    private long getPageCount(final long objectCount) {
        final double dObjectCount = (double) objectCount;
        final double dPageSize = (double) pageSize;

        final double dResult = Math.ceil(dObjectCount / pageSize);
        final long result = (long) dResult;

        return result;
    }

    private long getPaginatorBegin(final long pageNumber) {
        return (pageNumber - 1) * pageSize;
    }

    private long getPaginatorCount(final long begin, final long objectCount) {
        return Math.min(pageSize, (objectCount - begin));
    }

    private long getPaginatorEnd(final long begin, final long count) {
        long paginatorEnd = begin + count;
        if (paginatorEnd < 0) {
            paginatorEnd = 0;
        }
        return paginatorEnd;
    }
}
