// CMS publishToFile initialization file
//
// $Id: enterprise.init 1357 2006-11-06 13:02:24Z sskracic $
//

// Modified CMS enterprise.init: Contains just the publishToFile elements


init com.arsdigita.cms.publishToFile.LegacyInitializer {
    // List of publish destinations for content types 
    // Each element is a four-element list in the format 
    // '{ "content type", "root directory", "shared storage",  
    // "url stub" }'. 
    // "Content type" is the object type of the content type. 
    // "Root directory" must be a path to a writable directory, relative 
    // to the file-system root.
    // (pboy): "Root directory here is relative to application base!
    // "Shared storage" must be _true_ if the root
    // directory is shared NFS storage, _false_ otherwise. "URL stub"
    // must be the path component of the URL from which the live server 
    // will serve from this directory.
    destination = { 
      { "com.arsdigita.cms.ContentItem", 
        "p2fs", 
        false, 
        "/p2fs" },
    // (pboy): starting with webapps refers to the CCM_HOME env variable which
    // points to the installation root of the servlet container. This is not
    // used anymore, all specifications are relative to webapplication base.
    // So the following may have to be changed to "packages/content-section/templates"
    // if someone tries to use p2fs
      { "com.arsdigita.cms.Template",
	    // "webapps/ROOT/packages/content-section/templates",
	    "packages/content-section/templates",
        false, 
        "/templates" }
    };

    // Class which implements PublishToFileListener used to perform
    // additional actions when publishing or unpublishing to the file system.
    publishListener = "com.arsdigita.cms.publishToFile.PublishToFile";

    // Queue management parameters.

    // Set startupDelay to 0 to disable the processing of the queue
    // Time (seconds) before starting to monitor the
    // queue after a server start
    startupDelay = 30;

    // Time (in seconds) between checking if there are entries in the
    // publishToFile queue.
    // A value <= 0 disables processing the queue on this server.
    pollDelay = 5;

    // Time to wait (seconds) before retrying
    // to process a failed entry
    retryDelay = 120;

    // Number of queue entries to process at once.
    blockSize = 40;
    // Number of times a failed queue entry will be
    // reprocessed. If processing has failed more than
    // that number of times, the entry will be
    // ignored.
    maximumFailCount = 10;

    // Method used to select entries for processing.
    // 'QueuedOrder'-in  queued order.
    // 'GroupByParent'-group entries according to parent when selecting items
    //  (allows optimizations if a listener task required for all elements in a folder
    //   can be done only once for the folder).
    blockSelectMethod = "GroupByParent";
}


