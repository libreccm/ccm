//
// Copyright (C) 2004 Red Hat Inc. All Rights Reserved.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
// $Id: Contact.pdl 1689 2007-10-26 11:06:23Z chrisg23 $
// $DateTime: 2004/08/17 23:15:09 $

model com.arsdigita.cms.contenttypes.ldn;

import com.arsdigita.cms.ContentPage;
import com.arsdigita.cms.ContentItem;

// object type to hold Contact content type
object type Contact extends ContentPage {

    String [0..1] givenName = ct_ldn_contacts.given_name VARCHAR(1000);
    String [0..1] familyName = ct_ldn_contacts.family_name VARCHAR(1000);
    String [0..1] suffix = ct_ldn_contacts.suffix VARCHAR(100);
    String [0..1] emails = ct_ldn_contacts.emails VARCHAR(500);
    String [0..1] description = ct_ldn_contacts.description VARCHAR(2000);
    String [0..1] orgName = ct_ldn_contacts.orgname VARCHAR(2000);
    String [0..1] deptName = ct_ldn_contacts.deptname VARCHAR(2000);
    String [0..1] role = ct_ldn_contacts.role VARCHAR(2000);
    // type of contact e.g. Enquiry,Complaint etc...
    ContactType [0..1] contactType = join ct_ldn_contacts.type_id
                                to ct_ldn_contact_types.type_id;
    component ContactAddress [0..1] contactAddress = join ct_ldn_contacts.address_id
                                to ct_ldn_contact_address.address_id;

    component ContactPhone [0..n] phones = join ct_ldn_contacts.contact_id
                                to ct_ldn_contact_phones.contact_id;

    reference key ( ct_ldn_contacts.contact_id );
}

association {
		Contact[0..1] associatedContactForItem =
                join cms_items.item_id to ct_ldn_contact_content_item_map.item_id,
                join ct_ldn_contact_content_item_map.contact_id to ct_ldn_contacts.contact_id;
        ContentItem[0..n] associatedContentItemsForContact =
                join ct_ldn_contacts.contact_id to ldn_contact_content_item_map.contact_id,
                join ldn_contact_content_item_map.item_id to cms_items.item_id;
        
	}
	
// the above association works fine for adding but for some strange reason when
// you try to remove an item from the association it also tries to delete it
// so instead you have to use a data operation

data operation removeContactFromContentItemAssociation {
	do {
		delete from ct_ldn_contact_content_item_map where item_id = :itemID		
	}	
}

data operation removeContactFromAllAssociations {
	do {
		delete from ct_ldn_contact_content_item_map where contact_id = :contactID
	}
}

query getContactForItem {
	BigDecimal contactID;
	BigDecimal itemID;
	do {
		select contact_id, item_id 
			from 
		ct_ldn_contact_content_item_map
			where
		item_id = :itemID
	} map { 
		contactID = contact_id;
		itemID = item_id;
	}
}

