//
// Copyright (C) 2009 Center for Social Policy Reseearch, University of Bremen
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

model com.arsdigita.cms.contenttypes;

import com.arsdigita.cms.ContentItem;
import com.arsdigita.kernel.ACSObject;

object type Project2Person extends ACSObject {
       String[0..1] task = ct_project2persons.task VARCHAR(150);       
       Person[0..1] targetItem = join ct_project2persons.target_item_id to ct_persons.person_id;

       Integer[0..1] personOrder = ct_project2persons.person_order INTEGER;
       
       reference key(ct_project2persons.project2person_id);
       aggressive load(project.id);
}

association {
	    composite Project[0..1] project = join ct_project2persons.project_id to ct_projects.project_id;
	    composite Project2Person[0..n] project2Person = join ct_projects.project_id to ct_project2persons.project_id;
}

query getReferingProject2Persons {
      BigDecimal id;

      do {
      	 select p.project2person_id from ct_project2persons p where p.target_item_id = :itemID
      } map {
      	id = p.project2person_id;
      }     
}

data operation swapProject2PersonWithNextInGroup {
     do {
     	update ct_project2persons
	set person_order = CASE WHEN (person_order = :personOrder) THEN
	    		   	(:nextPersonOrder)
			   ELSE
				(:personOrder)
			   END
        where (person_order = :personOrder or personOrder = :nextPersonOrder)
	and project_id = :projectID;
     }
}

query allRoleOrderForProject2Person {
      Integer personOrder;

      do {
      	 select p.person_order from ct_project2persons p where p.project_id = :projectID
      } map {
        personOrder = p.person_order;
      }
}
