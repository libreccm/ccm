//
// Copyright (C) 2010, 2011 Jens Pelzetter
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//

model com.arsdigita.cms.contenttypes;

import com.arsdigita.cms.ContentPage;
import com.arsdigita.cms.ContentBundle;

//PDL definition for the basic attributes of publication.
object type Publication extends ContentPage {
       
       Integer[0..1] yearOfPublication = ct_publications.year INTEGER;
       String[0..1] abstract = ct_publications.abstract CLOB;
       String[0..1] misc = ct_publications.misc CLOB;
       //The reviewed property has been moved here for performance reasons. It
       //is necessary to have access to this property from a data query    
       //over all publications of a person. Since this property was only 
       //available on some types, it was not possible to use joins *and*
       //get publications of *all* types. But exactly this use case appears on
       //several points.
       Boolean[0..1] reviewed = ct_publications.reviewed BIT;
       //This property is for internal use only. It updated automatically when
       //an author is added or removed. It contains a string with the names
       //of all authors of the publications and is used for efficient queries
       //(ordering by publications by their authors requires joins or subqueries
       //without this field)
       String[0..1] authorsStr = ct_publications.authors VARCHAR(2048);
       //Year on which the publication was first published 
       Integer[0..1] yearFirstPublished = ct_publications.firstPublished INTEGER;
       //The language of the publication 
       String[0..1] languageOfPublication = ct_publications.lang VARCHAR(128);

       reference key (ct_publications.publication_id);
}

object type PublicationBundle extends ContentBundle {
    
    reference key (ct_publication_bundles.bundle_id);
}

//Assoication for the authors
association {
	    
	    PublicationBundle[0..n] publication = join cms_person_bundles.bundle_id
	    		      		            to ct_publications_authorship.person_id,
					          join ct_publications_authorship.publication_id
					            to ct_publication_bundles.bundle_id;

            GenericPersonBundle[0..n] authors = join ct_publication_bundles.bundle_id
	                                          to ct_publications_authorship.publication_id,
					        join ct_publications_authorship.person_id
                                                  to cms_person_bundles.bundle_id;

            // Additional attributes
	    Boolean[0..1] editor = ct_publications_authorship.editor BIT;
	    Integer[0..1] authorOrder = ct_publications_authorship.authorship_order INTEGER;
}

//Association between GenericOrganizationalUnit and Publications. 
//AuthoringStep is attached by configuration. 
//See GenericOrganizationalUnitsPublicationsStep and 
//PublicationGenericOrganizationalUnitsStep for more information
association {
    GenericOrganizationalUnitBundle[0..n] orgaunits = join ct_publication_bundles.bundle_id
                                                        to cms_orgaunits_publications_map.publication_id,
                                                      join cms_orgaunits_publications_map.orgaunit_id
                                                        to cms_orgaunit_bundles.bundle_id;

    PublicationBundle[0..n] publications = join cms_orgaunit_bundles.bundle_id
                                       to cms_orgaunits_publications_map.orgaunit_id,
                                     join cms_orgaunits_publications_map.publication_id
                                       to ct_publication_bundles.bundle_id;
    Integer[0..1] publicationOrder = cms_orgaunits_publications_map.publication_order INTEGER;
}

//Retrieves the publications of an organizational unit (the ids). Allows filtering for a orgaunit id 
//The authors are merged into one field in the result, each publication will 
//only appear one time
query getIdsOfPublicationsForOrgaUnit {
    BigDecimal publicationId;    
    BigDecimal orgaunitId;
    String name;
    
    do {
        select distinct on (ct_publication_bundles.bundle_id) 
            ct_publication_bundles.bundle_id,                                                                                               
            cms_items.name,
            cms_orgaunits_publications_map.orgaunit_id            
        from ct_publication_bundles
        join cms_items on ct_publication_bundles.bundle_id = cms_items.item_id
        join cms_orgaunits_publications_map on ct_publication_bundles.bundle_id = cms_orgaunits_publications_map.publication_id        
        where cms_orgaunits_publications_map.orgaunit_id in :orgaunitIds
    } map {
        publicationId = ct_publication_bundles.bundle_id;        
        orgaunitId = cms_orgaunits_publications_map.orgaunit_id;
        name = cms_items.name;
    }
}

//Retrieves the publications of a series (the ids). Allows filtering for a orgaunit id 
//The authors are merged into one field in the result, each publication will 
//only appear one time
query getIdsOfPublicationsForSeries {
     BigDecimal publicationId; 
     BigDecimal seriesId;     
     String name;
     String volumeOfSeries;

     do {
        select distinct on (ct_publication_bundles.bundle_id)
            ct_publication_bundles.bundle_id,
            cms_items.name,
            ct_publications_volume_in_series.series_id,
            ct_publications_volume_in_series.volumeOfSeries
        from ct_publication_bundles
        join cms_items on ct_publication_bundles.bundle_id = cms_items.item_id
        join ct_publications_volume_in_series on ct_publication_bundles.bundle_id = ct_publications_volume_in_series.publication_id
        where ct_publications_volume_in_series.series_id = :seriesId
     } map {
        publicationId =  ct_publication_bundles.bundle_id;
        seriesId = ct_publications_volume_in_series.series_id;
        name = cms_items.name;
        volumeOfSeries = ct_publications_volume_in_series.volumeOfSeries;
     }
}

query getVolumeOfSeries {
    String volumeOfSeries;

    do {
        select ct_publications_volume_in_series.volumeOfSeries
        from ct_publications_volume_in_series
        where ct_publications_volume_in_series.series_id = :seriesId
        and ct_publications_volume_in_series.publication_id = :publicationId
    } map {
        volumeOfSeries = ct_publications_volume_in_series.volumeOfSeries;
    }
}

//Retrieves all publications of an author
query getPublicationsForAuthor {
    BigDecimal publicationId;
    BigDecimal authorId;
    String name;

    do {
        select ct_publication_bundles.bundle_id,
               ct_publications_authorship.person_id,
               cms_items.name
        from ct_publication_bundles.bundle_id,
             join cms_items on ct_publication_bundles.bundle_id = cms_items.item_id
             join ct_publications_authorship on ct_publication_bundles.bundle_id = ct_publications_authorship.publication_id            
    } map {    
        publicationId = ct_publication_bundles.bundle_id;        
        authorId = ct_publications_authorship.person_id;
        name = cms_items.name;
    }
}